// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `SpeechInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package armarx;

public interface ChatSessionPrx extends Glacier2.SessionPrx
{
    public void setCallback(ChatCallbackPrx cb);

    public void setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, Callback_ChatSession_setCallback __cb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_ChatSession_setCallback __cb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public void end_setCallback(Ice.AsyncResult __result);

    public void sendText(long timestamp, String name, String message);

    public void sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, Callback_ChatSession_sendText __cb);

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Callback_ChatSession_sendText __cb);

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    public void end_sendText(Ice.AsyncResult __result);

    public void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence);

    public void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, Callback_ChatSession_sendChunkAsync __cb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx, Callback_ChatSession_sendChunkAsync __cb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    public void end_sendChunkAsync(Ice.AsyncResult __result);
}
