// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `SpeechInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package armarx;

/**
 * Provides type-specific helper functions.
 **/
public final class ChatSessionPrxHelper extends Ice.ObjectPrxHelperBase implements ChatSessionPrx
{
    private static final String __destroy_name = "destroy";

    public void destroy()
    {
        destroy(null, false);
    }

    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_destroy(begin_destroy(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, false, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__destroy_name, __cb);
        try
        {
            __result.prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_destroy(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __destroy_name);
    }

    private static final String __sendChunkAsync_name = "sendChunkAsync";

    public void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence)
    {
        sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false);
    }

    public void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx)
    {
        sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true);
    }

    private void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendChunkAsync(begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, Ice.Callback __cb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, Callback_ChatSession_sendChunkAsync __cb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence, java.util.Map<String, String> __ctx, Callback_ChatSession_sendChunkAsync __cb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                byte[] data, 
                                                int minBufferSize, 
                                                AudioEncoding encoding, 
                                                long timestamp, 
                                                boolean isNewSentence, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                 byte[] data, 
                                                 int minBufferSize, 
                                                 AudioEncoding encoding, 
                                                 long timestamp, 
                                                 boolean isNewSentence, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendChunkAsync(offset, 
                                    data, 
                                    minBufferSize, 
                                    encoding, 
                                    timestamp, 
                                    isNewSentence, 
                                    __ctx, 
                                    __explicitCtx, 
                                    __synchronous, 
                                    new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendChunkAsync(int offset, 
                                                 byte[] data, 
                                                 int minBufferSize, 
                                                 AudioEncoding encoding, 
                                                 long timestamp, 
                                                 boolean isNewSentence, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendChunkAsync_name, __cb);
        try
        {
            __result.prepare(__sendChunkAsync_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(offset);
            AudioChunkHelper.write(__os, data);
            __os.writeInt(minBufferSize);
            AudioEncoding.__write(__os, encoding);
            __os.writeLong(timestamp);
            __os.writeBool(isNewSentence);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendChunkAsync(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendChunkAsync_name);
    }

    private static final String __sendText_name = "sendText";

    public void sendText(long timestamp, String name, String message)
    {
        sendText(timestamp, name, message, null, false);
    }

    public void sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx)
    {
        sendText(timestamp, name, message, __ctx, true);
    }

    private void sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendText(begin_sendText(timestamp, name, message, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message)
    {
        return begin_sendText(timestamp, name, message, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx)
    {
        return begin_sendText(timestamp, name, message, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, Ice.Callback __cb)
    {
        return begin_sendText(timestamp, name, message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendText(timestamp, name, message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, Callback_ChatSession_sendText __cb)
    {
        return begin_sendText(timestamp, name, message, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, String name, String message, java.util.Map<String, String> __ctx, Callback_ChatSession_sendText __cb)
    {
        return begin_sendText(timestamp, name, message, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendText(timestamp, name, message, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendText(timestamp, name, message, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendText(timestamp, name, message, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendText(long timestamp, 
                                          String name, 
                                          String message, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendText(timestamp, name, message, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendText(long timestamp, 
                                           String name, 
                                           String message, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendText(timestamp, 
                              name, 
                              message, 
                              __ctx, 
                              __explicitCtx, 
                              __synchronous, 
                              new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendText(long timestamp, 
                                           String name, 
                                           String message, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendText_name, __cb);
        try
        {
            __result.prepare(__sendText_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timestamp);
            __os.writeString(name);
            __os.writeString(message);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendText(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendText_name);
    }

    private static final String __setCallback_name = "setCallback";

    public void setCallback(ChatCallbackPrx cb)
    {
        setCallback(cb, null, false);
    }

    public void setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        setCallback(cb, __ctx, true);
    }

    private void setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_setCallback(begin_setCallback(cb, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb)
    {
        return begin_setCallback(cb, null, false, false, null);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx)
    {
        return begin_setCallback(cb, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, Ice.Callback __cb)
    {
        return begin_setCallback(cb, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCallback(cb, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, Callback_ChatSession_setCallback __cb)
    {
        return begin_setCallback(cb, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_ChatSession_setCallback __cb)
    {
        return begin_setCallback(cb, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setCallback(cb, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setCallback(cb, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setCallback(cb, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setCallback(cb, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setCallback(cb, 
                                 __ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_setCallback(ChatCallbackPrx cb, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setCallback_name, __cb);
        try
        {
            __result.prepare(__setCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ChatCallbackPrxHelper.__write(__os, cb);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setCallback(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __setCallback_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatSessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatSessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatSessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ChatSessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ChatSessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ChatSessionPrx.class, ChatSessionPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::armarx::ChatSession"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[2];
    }

    public static void __write(IceInternal.BasicStream __os, ChatSessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChatSessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChatSessionPrxHelper result = new ChatSessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
