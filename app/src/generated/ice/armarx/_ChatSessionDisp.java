// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `SpeechInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package armarx;

public abstract class _ChatSessionDisp extends Ice.ObjectImpl implements ChatSession
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::armarx::ChatSession"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[2];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[2];
    }

    public static String ice_staticId()
    {
        return __ids[2];
    }

    /**
     * Destroy the session. This is called automatically when the router is destroyed.
     *
     **/
    public final void destroy()
    {
        destroy(null);
    }

    public final void sendChunkAsync(int offset, byte[] data, int minBufferSize, AudioEncoding encoding, long timestamp, boolean isNewSentence)
    {
        sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, null);
    }

    public final void sendText(long timestamp, String name, String message)
    {
        sendText(timestamp, name, message, null);
    }

    public final void setCallback(ChatCallbackPrx cb)
    {
        setCallback(cb, null);
    }

    public static Ice.DispatchStatus ___setCallback(ChatSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ChatCallbackPrx cb;
        cb = ChatCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setCallback(cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendText(ChatSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long timestamp;
        String name;
        String message;
        timestamp = __is.readLong();
        name = __is.readString();
        message = __is.readString();
        __inS.endReadParams();
        __obj.sendText(timestamp, name, message, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___sendChunkAsync(ChatSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int offset;
        byte[] data;
        int minBufferSize;
        AudioEncoding encoding;
        long timestamp;
        boolean isNewSentence;
        offset = __is.readInt();
        data = AudioChunkHelper.read(__is);
        minBufferSize = __is.readInt();
        encoding = AudioEncoding.__read(__is);
        timestamp = __is.readLong();
        isNewSentence = __is.readBool();
        __inS.endReadParams();
        __obj.sendChunkAsync(offset, data, minBufferSize, encoding, timestamp, isNewSentence, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "destroy",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "sendChunkAsync",
        "sendText",
        "setCallback"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return Glacier2._SessionDisp.___destroy(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___sendChunkAsync(this, in, __current);
            }
            case 6:
            {
                return ___sendText(this, in, __current);
            }
            case 7:
            {
                return ___setCallback(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
